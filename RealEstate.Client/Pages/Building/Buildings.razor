@page "/buildings"

@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using RealEstate.Client.Services.Building
@using RealEstate.Contract.Building
@using RealEstate.Client.Services

@inject IBuildingService _buildingService

<h2 style="padding-bottom: 40px">Объекты</h2>

@* @foreach (var building in buildings)
{
    <div class="card" style="width: 250px">
        <img src="building_image.jpg" class="card-img-top" alt="Building Image">
        <div class="card-body">
            <h5 class="card-title">@building.Name</h5>
            <p class="card-text">@building.Address</p>
            <p class="card-text">Description of the building goes here.</p>
            <a href="#" class="btn btn-primary">Добавить квартиры</a>
        </div>
    </div>
}
 *@
<div class="overflow-auto">
    @foreach (var building in buildings)
    {
        <div class="card" style="width: 250px; flex: 0 0 auto;">
            <img src="building_image.jpg" class="card-img-top" alt="Building Image">
            <div class="card-body">
                <h5 class="card-title">@building.Name</h5>
                <p class="card-text">@building.Address</p>
                <p class="card-text">Description of the building goes here.</p>
                <a href="#" class="btn btn-primary">Добавить квартиры</a>
            </div>
        </div>
    }
</div>

@code {
    private List<SingleBuildingResponse> buildings = new();
    private GetBuildingsQuery getBuildingsQuery = new();

    #region Error
    private string errorMessage;
    private bool isError;
    private void ShowError(string error)
    {
        errorMessage = error;
        isError = true;
    }

    private bool isLoading;
    #endregion


    private async Task LoadBuildings()
    {
        var response = await _buildingService.GetAllAsync(getBuildingsQuery);

        if (response.Success)
        {
            buildings = response.Result.Items.ToList();
        }
        else
        {
            ShowError(response.Error);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.WhenAll(LoadBuildings());
        isLoading = false;
    }
}
